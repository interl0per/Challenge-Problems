#include <iostream>
#include <math.h>
#include <vector>
#include <algorithm>
#include <string>
#include <map>
#include <math.h>
#include <bitset>
#include <queue>
#include <sstream>

using namespace std;

vector<bool> visited(1024,false);
typedef struct board { int depth; 	int val; 	char state[3][3]; }board;

int stateToInt(char state[3][3])
{
	int res = 0;
	for(int i = 0; i < 9; i++)
		if(state[i/3][i%3] == '*')
			res+= pow(2, i);
	return(res);
}
char flip(char c)
{
	if(c=='*')	
		return'.';
	else
		return'*';
}
board flipstate(board targ, int x, int y)
{
	targ.state[x][y] = flip(targ.state[x][y]);
	if(x+1<3) targ.state[x+1][y] = flip(targ.state[x+1][y]);
	if(x-1>-1) targ.state[x-1][y] = flip(targ.state[x-1][y]);
	if(y+1<3) targ.state[x][y+1] = flip(targ.state[x][y+1]);
	if(y-1>-1) targ.state[x][y-1] = flip(targ.state[x][y-1]);
	return targ;
}
int bfs(board strt, int end)
{
	queue<board> cstate;
	cstate.push(strt);
	while(!cstate.empty())
	{
		board state = cstate.front();
		cstate.pop();
		visited[state.val] = true;
		if(state.val==end)
			return state.depth;
		for(int i = 0; i < 3; i++)
			for(int j = 0; j < 3; j++)
			{
				board candidate = flipstate(state, i, j);
				candidate.depth = 1+state.depth;	
				int y = stateToInt(candidate.state);
				if(!visited[y])
				{
					candidate.val = y;
					visited[y] = true;
					cstate.push(candidate);
				}
			}
	}
	return -1;
}
int main()
{
	int n;
	cin>>n;
	while(n)
	{
		board targ,start;
		for(int i = 0; i < 3; i++)
			for(int j = 0; j < 3; j++)
			{
				start.depth = 0;
				start.state[i][j] = '.';
				cin>>targ.state[i][j];
			}
		int targetLoc = stateToInt(targ.state);
		start.val = 0;
		cout<<bfs(start,targetLoc)<<'\n';
		vector<bool> refreshed(1024,false);
		visited = refreshed;
		n--;
	}
}
